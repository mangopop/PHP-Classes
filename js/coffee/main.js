// Generated by CoffeeScript 1.9.0
(function() {
  var Animal, Horse, Snake, age, ages, changeNumbers, child, cholesterol, city, eat, evens, food, footprints, futurists, grade, healthy, inner, name, outer, pick, sam, score, solipsism, speed, street, tom, winner, x, yearsOld, _i, _len, _ref, _ref1, _ref2,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  outer = 5;

  changeNumbers = function() {
    var inner;
    inner = -1;
    return outer = 10;
  };

  inner = changeNumbers();

  console.log(inner);

  eat = function(food) {
    if (food === 'toast') {
      return "toast doesn't belong here!";
    } else {
      return "This is correct";
    }
  };

  _ref = ['toast', 'cheese', 'wine'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    food = _ref[_i];
    console.log(eat(food));
  }

  evens = (function() {
    var _j, _results;
    _results = [];
    for (x = _j = 0; _j <= 10; x = _j += 2) {
      _results.push(x);
    }
    return _results;
  })();

  yearsOld = {
    max: 10,
    ida: 9,
    tim: 11
  };

  ages = (function() {
    var _results;
    _results = [];
    for (child in yearsOld) {
      age = yearsOld[child];
      _results.push(child + " is " + age);
    }
    return _results;
  })();

  console.log(ages);

  console.log(ages.join(","));

  pick = 92;

  if (pick === 47 || pick === 92 || pick === 13) {
    winner = true;
  }

  if ((typeof mind !== "undefined" && mind !== null) && (typeof world === "undefined" || world === null)) {
    solipsism = true;
  }

  speed = 0;

  if (speed == null) {
    speed = 15;
  }

  footprints = typeof yeti !== "undefined" && yeti !== null ? yeti : "bear";

  cholesterol = 127;

  healthy = (200 > cholesterol && cholesterol > 60);

  switch (day) {
    case "Mon":
      go(work);
      break;
    case "Tue":
      go(relax);
      break;
    case "Thu":
      go(iceFishing);
      break;
    case "Fri":
    case "Sat":
      if (day === bingoDay) {
        go(bingo);
        go(dancing);
      }
      break;
    case "Sun":
      go(church);
      break;
    default:
      go(work);
  }

  score = 76;

  grade = (function() {
    switch (false) {
      case !(score < 60):
        return 'F';
      case !(score < 70):
        return 'D';
      case !(score < 80):
        return 'C';
      case !(score < 90):
        return 'B';
      default:
        return 'A';
    }
  })();

  Animal = (function() {
    function Animal(_at_name) {
      this.name = _at_name;
    }

    Animal.prototype.move = function(meters) {
      return alert(this.name + (" moved " + meters + "m."));
    };

    return Animal;

  })();

  Snake = (function(_super) {
    __extends(Snake, _super);

    function Snake() {
      return Snake.__super__.constructor.apply(this, arguments);
    }

    Snake.prototype.move = function() {
      alert("Slithering...");
      return Snake.__super__.move.call(this, 5);
    };

    return Snake;

  })(Animal);

  Horse = (function(_super) {
    __extends(Horse, _super);

    function Horse() {
      return Horse.__super__.constructor.apply(this, arguments);
    }

    Horse.prototype.move = function() {
      alert("Galloping...");
      return Horse.__super__.move.call(this, 45);
    };

    return Horse;

  })(Animal);

  sam = new Snake("Sammy the Python");

  tom = new Horse("Tommy the Palomino");

  sam.move();

  tom.move();

  futurists = {
    sculptor: "Umberto Boccioni",
    painter: "Vladimir Burliuk",
    poet: {
      name: "F.T. Marinetti",
      address: ["Via Roma 42R", "Bellagio, Italy 22021"]
    }
  };

  _ref1 = futurists.poet, name = _ref1.name, (_ref2 = _ref1.address, street = _ref2[0], city = _ref2[1]);

}).call(this);

//# sourceMappingURL=main.js.map
